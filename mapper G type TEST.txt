[임시저장 메일 모니터링 제외 건 mapper 기능 구현]


1. decoder에서 timestamp, mailkey 정보 제공

2. mapper type 은 "G" 로 정의

3. mapper type이 "G" 인 경우 아래 로직을 따름
 
    1) mailkey 정보로 동일한 메일을 모두 가져옴

    2) 동일한 메일을 timestamp로 정렬

    3) timestamp가 가장 최신인 데이터를 제외하고 서비스타입을 모니터링 제외 타입으로 변경(XX2S)

        모니터링 제외 데이터의 경우 매핑 작업을 수행하지 않고 즉시 로깅

    4) timestamp가 가장 최신인 데이터의 경우 기존 mapper로직대로 동작(compose info, mapping, merge 등)



- 예시

1. 동일한 mailkey를 가진 WGGT(20210323 18:00:00), WGGT(20210323 18:00:01), WGGS(20210323 18:00:02) 가 있는 경우

WGGS만 기존대로 로깅, WGGT 2개의 경우 XX2S로 로깅



2. 동일한 mailkey를 가진 WGGT(20210323 18:00:00), WGGT(20210323 18:00:01), WGGT(20210323 18:00:02) 가 있는 경우

WGGT(20210323 18:00:02) 만 기존대로 로깅. 나머지 WGGT 2개의 경우 XX2S로 로깅



3. timestamp가 동일한 경우(거의 없을 것으로 보이지만) 하나의 메일만 기존대로 로깅.



4. 동일한 mailkey를 가진 WGGT(20210323 18:00:00), WGGS(20210323 18:00:01), WGGS(20210323 18:00:02) 가 있는 경우 

(이 case도 논리적으론 없을 것으로 예상)

WGGS 2개는 기존대로 로깅. WGGT 1개의 경우 XX2S로 로깅



정리하면, WGGS 의 경우 모두 로깅. 

WGGT의 경우 WGGS가 없는 경우에는 마지막 데이터만 기존대로 로깅. WGGS가 있는 경우는 모두 모니터링 제외로 로깅..


	string infofile;
	string body;
	string bodypath;
	int seq = 0;
	seq = g_EmassFileName.getSeq()+1;
	g_EmassFileName.setSeq(seq);
	infofile = g_EmassFileName.getMsgPath();
	msgPath = infofile;
	body = getWebsocketInfo().getBody();
	bodypath = g_EmassFileName.getBodyPath();
